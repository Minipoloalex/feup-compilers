import Quicksort;
import io;

SymbolTable extends Quicksort {

    .field public intField.i32;

    .field public boolField.bool;

    .method public method1().i32 {

        intArray.array.i32 :=.array.i32 new(array, 3.i32).array.i32;

        intArray[0.i32].i32 :=.i32 10.i32;

        intArray[1.i32].i32 :=.i32 20.i32;

        intArray[2.i32].i32 :=.i32 30.i32;

        i.i32 :=.i32 0.i32;

        whileCond1:

            t2.i32 :=.i32 arraylength(intArray.array.i32).i32;
            t3.bool :=.bool i.i32 <.bool t2.i32;

        if (t3.bool) goto whileLoop1;
        goto whileEnd1;

        whileLoop1:

            t4.i32 :=.i32 intArray[i.i32].i32;
            boolLocal1.bool :=.bool t4.i32 <.bool 30.i32;

            i.i32 :=.i32 i.i32 +.i32 1.i32;

        goto whileCond1;
        whileEnd1:

        t7.bool :=.bool i.i32 <.bool 2.i32;

        if (t7.bool) goto if2;

            putfield(this.SymbolTable, boolField.bool, 1.bool).V;

        goto endif2;

        if2:

            putfield(this.SymbolTable, boolField.bool, 0.bool).V;

        endif2:

        ret.i32 0.i32;

    }

    .method public method2(intParam1.i32, boolParam1.bool).bool {

        ret.bool $2.boolParam1.bool;

    }

    .method public static main(args.array.String).V {

        ret.V;

    }

    .construct SymbolTable().V {
        invokespecial(this, "<init>").V;
    }
}

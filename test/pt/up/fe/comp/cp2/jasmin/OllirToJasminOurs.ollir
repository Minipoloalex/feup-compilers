import Evaluator.eval;
import io;

BinarySearch {


.method public static main(args.array.String).V {
tmp1.BinarySearch :=.BinarySearch new(BinarySearch).BinarySearch;
invokespecial(tmp1.BinarySearch,"<init>").V;
bs.BinarySearch :=.BinarySearch tmp1.BinarySearch;
tmp2.array.i32 :=.array.i32 new(array, 5.i32).array.i32;
__varargs_array_0.array.i32 :=.array.i32 tmp2.array.i32;
__varargs_array_0.array.i32[0.i32].i32 :=.i32 1.i32;
__varargs_array_0.array.i32[1.i32].i32 :=.i32 2.i32;
__varargs_array_0.array.i32[2.i32].i32 :=.i32 3.i32;
__varargs_array_0.array.i32[3.i32].i32 :=.i32 4.i32;
__varargs_array_0.array.i32[4.i32].i32 :=.i32 5.i32;
arr.array.i32 :=.array.i32 __varargs_array_0.array.i32;
target.i32 :=.i32 3.i32;
tmp3.i32 :=.i32 invokevirtual(bs.BinarySearch, "binarySearch", arr.array.i32, target.i32).i32;
result.i32 :=.i32 tmp3.i32;
invokestatic(io, "println", result.i32).V;
ret.V;
}

.method binarySearch(arr.array.i32, target.i32).i32 {
left.i32 :=.i32 0.i32;
tmp4.i32 :=.i32 arraylength(arr.array.i32.array.i32).i32;
tmp5.i32 :=.i32 tmp4.i32 -.i32 1.i32;
right.i32 :=.i32 tmp5.i32;
tmp6.i32 :=.i32 0.i32 -.i32 1.i32;
res.i32 :=.i32 tmp6.i32;
goto while_cond_0;
while_body_0:
tmp9.i32 :=.i32 right.i32 -.i32 left.i32;
tmp10.i32 :=.i32 tmp9.i32 /.i32 2.i32;
tmp11.i32 :=.i32 left.i32 +.i32 tmp10.i32;
mid.i32 :=.i32 tmp11.i32;
tmp12.i32 :=.i32 arr.array.i32[mid.i32].i32;
tmp13.i32 :=.i32 invokestatic(eval, "evaluate", tmp12.i32).i32;
midVal.i32 :=.i32 tmp13.i32;
tmp14.bool :=.bool midVal.i32 <.bool target.i32;
tmp15.bool :=.bool !.bool tmp14.bool;
tmp16.bool :=.bool target.i32 <.bool midVal.i32;
tmp17.bool :=.bool !.bool tmp16.bool;
if (tmp15.bool) goto if_then_0;
tmp18.bool :=.bool 0.bool;
goto if_end_0;
if_then_0:
tmp18.bool :=.bool tmp17.bool;
if_end_0:
if (tmp18.bool) goto if_then_2;
tmp20.bool :=.bool midVal.i32 <.bool target.i32;
if (tmp20.bool) goto if_then_1;
tmp22.i32 :=.i32 mid.i32 -.i32 1.i32;
right.i32 :=.i32 tmp22.i32;
goto if_end_1;
if_then_1:
res.i32 :=.i32 left.i32;
tmp21.i32 :=.i32 mid.i32 +.i32 1.i32;
left.i32 :=.i32 tmp21.i32;
if_end_1:
goto if_end_2;
if_then_2:
tmp19.i32 :=.i32 right.i32 +.i32 1.i32;
left.i32 :=.i32 tmp19.i32;
res.i32 :=.i32 mid.i32;
if_end_2:
while_cond_0:
tmp7.i32 :=.i32 right.i32 +.i32 1.i32;
tmp8.bool :=.bool left.i32 <.bool tmp7.i32;
if (tmp8.bool) goto while_body_0;
ret.i32 res.i32;
}

.construct BinarySearch().V {
invokespecial(this, "<init>").V;
}
}

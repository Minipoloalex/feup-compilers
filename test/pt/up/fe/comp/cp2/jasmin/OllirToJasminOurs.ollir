import io;
import Quicksort;
SymbolTable extends Quicksort {

.field public intField.i32;
.field public boolField.bool;

.method public method1().i32 {
tmp0.i32 :=.i32 0.i32 +.i32 10.i32;
tmp1.i32 :=.i32 1.i32 *.i32 5.i32;
tmp2.i32 :=.i32 3.i32 +.i32 9.i32;
tmp3.i32 :=.i32 tmp1.i32 /.i32 tmp2.i32;
tmp4.i32 :=.i32 tmp0.i32 -.i32 tmp3.i32;
intLocal1.i32 :=.i32 tmp4.i32;
boolLocal1.bool :=.bool 1.bool;
ret.i32 0.i32;
}

.method public method2(intParam1.i32, boolParam1.bool).bool {
tmp5.bool :=.bool 1.i32 <.bool 2.i32;
tmp6.bool :=.bool 5.i32 >.bool 4.i32;
tmp7.bool :=.bool tmp5.bool &&.bool tmp6.bool;
boolLocal1.bool :=.bool tmp7.bool;
tmp8.bool :=.bool boolParam1.bool ||.bool boolLocal1.bool;
ret.bool tmp8.bool;
}

.method public recursiveMethod(n.i32).i32 {
test.Test :=.Test new(Test).Test;
invokespecial(test.Test,"<init>").V;
tmp10.i32 :=.i32 invokevirtual(test.Test, "foo").i32;
tmp11.i32 :=.i32 invokevirtual(this, "recursiveMethod", tmp10.i32).i32;
ret.i32 tmp11.i32;
}

.method public static main(args.array.String).V {
ret.V ;
}

.construct SymbolTable().V {
invokespecial(this, "").V;
}
}